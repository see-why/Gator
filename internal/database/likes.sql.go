// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: likes.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createLike = `-- name: CreateLike :one
INSERT INTO likes (id, created_at, updated_at, user_id, post_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, user_id, post_id
`

type CreateLikeParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	PostID    uuid.UUID
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, createLike,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.PostID,
	)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.PostID,
	)
	return i, err
}

const deleteLike = `-- name: DeleteLike :execrows
DELETE FROM likes 
WHERE user_id = $1 AND post_id = $2
`

type DeleteLikeParams struct {
	UserID uuid.UUID
	PostID uuid.UUID
}

func (q *Queries) DeleteLike(ctx context.Context, arg DeleteLikeParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteLike, arg.UserID, arg.PostID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getLikeByUserAndPost = `-- name: GetLikeByUserAndPost :one
SELECT id, created_at, updated_at, user_id, post_id FROM likes WHERE user_id = $1 AND post_id = $2
`

type GetLikeByUserAndPostParams struct {
	UserID uuid.UUID
	PostID uuid.UUID
}

func (q *Queries) GetLikeByUserAndPost(ctx context.Context, arg GetLikeByUserAndPostParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, getLikeByUserAndPost, arg.UserID, arg.PostID)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.PostID,
	)
	return i, err
}

const getLikeCountForPost = `-- name: GetLikeCountForPost :one
SELECT COUNT(*) FROM likes WHERE post_id = $1
`

func (q *Queries) GetLikeCountForPost(ctx context.Context, postID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getLikeCountForPost, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getLikesForUser = `-- name: GetLikesForUser :many
SELECT 
    l.id as like_id,
    l.created_at as liked_at,
    p.id,
    p.created_at,
    p.updated_at,
    p.title,
    p.url,
    p.description,
    p.published_at,
    p.feed_id,
    f.name as feed_name
FROM likes l
JOIN posts p ON l.post_id = p.id
JOIN feeds f ON p.feed_id = f.id
WHERE l.user_id = $1
ORDER BY l.created_at DESC
LIMIT $2 OFFSET $3
`

type GetLikesForUserParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

type GetLikesForUserRow struct {
	LikeID      uuid.UUID
	LikedAt     time.Time
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Url         string
	Description sql.NullString
	PublishedAt sql.NullTime
	FeedID      uuid.UUID
	FeedName    string
}

func (q *Queries) GetLikesForUser(ctx context.Context, arg GetLikesForUserParams) ([]GetLikesForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getLikesForUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLikesForUserRow
	for rows.Next() {
		var i GetLikesForUserRow
		if err := rows.Scan(
			&i.LikeID,
			&i.LikedAt,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
			&i.FeedName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
