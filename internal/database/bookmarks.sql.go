// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bookmarks.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createBookmark = `-- name: CreateBookmark :one
INSERT INTO bookmarks (id, created_at, updated_at, user_id, post_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, user_id, post_id
`

type CreateBookmarkParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	PostID    uuid.UUID
}

func (q *Queries) CreateBookmark(ctx context.Context, arg CreateBookmarkParams) (Bookmark, error) {
	row := q.db.QueryRowContext(ctx, createBookmark,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.PostID,
	)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.PostID,
	)
	return i, err
}

const deleteBookmark = `-- name: DeleteBookmark :execrows
DELETE FROM bookmarks 
WHERE user_id = $1 AND post_id = $2
`

type DeleteBookmarkParams struct {
	UserID uuid.UUID
	PostID uuid.UUID
}

func (q *Queries) DeleteBookmark(ctx context.Context, arg DeleteBookmarkParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteBookmark, arg.UserID, arg.PostID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getBookmarksForUser = `-- name: GetBookmarksForUser :many
SELECT 
    b.id as bookmark_id,
    b.created_at as bookmarked_at,
    p.id,
    p.created_at,
    p.updated_at,
    p.title,
    p.url,
    p.description,
    p.published_at,
    p.feed_id,
    f.name as feed_name
FROM bookmarks b
JOIN posts p ON b.post_id = p.id
JOIN feeds f ON p.feed_id = f.id
WHERE b.user_id = $1
ORDER BY b.created_at DESC
LIMIT $2 OFFSET $3
`

type GetBookmarksForUserParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

type GetBookmarksForUserRow struct {
	BookmarkID   uuid.UUID
	BookmarkedAt time.Time
	ID           uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Title        string
	Url          string
	Description  sql.NullString
	PublishedAt  sql.NullTime
	FeedID       uuid.UUID
	FeedName     string
}

func (q *Queries) GetBookmarksForUser(ctx context.Context, arg GetBookmarksForUserParams) ([]GetBookmarksForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getBookmarksForUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookmarksForUserRow
	for rows.Next() {
		var i GetBookmarksForUserRow
		if err := rows.Scan(
			&i.BookmarkID,
			&i.BookmarkedAt,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
			&i.FeedName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByID = `-- name: GetPostByID :one
SELECT id, created_at, updated_at, title, url, description, published_at, feed_id FROM posts WHERE id = $1
`

func (q *Queries) GetPostByID(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
		&i.FeedID,
	)
	return i, err
}
